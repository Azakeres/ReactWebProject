{"ast":null,"code":"import * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport MapData from \"../Census_County_TIGER00_IN.json\";\n\nconst DrawMap = (caseType, data) => {\n  console.log(\"drawing map\"); // setting up svg element on Home component; making size responsive\n\n  const height = 500;\n  const width = 960;\n  const svg = d3.select(\".mapviz\").append(\"svg\").attr(\"preserveAspectRatio\", \"xMinYMid meet\").attr(\"viewBox\", [0, 0, width, height]); // specifying map projection\n\n  const projection = d3.geoMercator();\n  const pathGenerator = d3.geoPath().projection(projection); // creating a group to arrange map elements\n\n  const g = svg.append(\"g\").attr(\"class\", \"map-group\");\n  g.append(\"path\").attr(\"class\", \"sphere\").attr(\"d\", pathGenerator({\n    type: \"Sphere\"\n  })); // enabling zooming/panning on entire svg\n  //   svg.call(\n  //     d3.zoom().on(\"zoom\", () => {\n  //       g.attr(\"transform\", d3.event.transform);\n  //     })\n  //   );\n\n  Promise.all([d3.tsv(\"https://unpkg.com/world-atlas@1.1.4/world/50m.tsv\"), d3.json(\"https://unpkg.com/world-atlas@1.1.4/world/50m.json\")]).then(([tsvData, topoJSONdata]) => {\n    // parses tsvData to extract country names for base map titles\n    const countryName = {};\n    tsvData.forEach(d => {\n      countryName[d.iso_n3] = d.name;\n    }); // draws a path for each country with countryName as title (shown on hover)\n\n    const countries = feature(topoJSONdata, topoJSONdata.objects.countries);\n    g.selectAll(\"path\").data(countries.features).enter().append(\"path\").attr(\"class\", \"country\").attr(\"d\", pathGenerator).append(\"title\").text(d => countryName[d.id]);\n  });\n}; // draws a path for each country with countryName as title (shown on hover)\n//   const countries = topojson.feature(\n//     MapData,\n//     MapData.objects.Census_County_TIGER00_IN1\n//   );\n//   g.selectAll(\"path\")\n//     .data(countries.features)\n//     .enter()\n//     .append(\"path\")\n//     .attr(\"class\", \"country\")\n//     .attr(\"d\", pathGenerator)\n//     .append(\"title\");\n// };\n\n\nexport default DrawMap;","map":{"version":3,"sources":["/Users/azakeres/ArashWebsite/personalwebsite/src/d3/DrawMap.js"],"names":["d3","topojson","MapData","DrawMap","caseType","data","console","log","height","width","svg","select","append","attr","projection","geoMercator","pathGenerator","geoPath","g","type","Promise","all","tsv","json","then","tsvData","topoJSONdata","countryName","forEach","d","iso_n3","name","countries","feature","objects","selectAll","features","enter","text","id"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;AACA,OAAO,KAAKC,QAAZ,MAA0B,iBAA1B;AACA,OAAOC,OAAP,MAAoB,kCAApB;;AAEA,MAAMC,OAAO,GAAG,CAACC,QAAD,EAAWC,IAAX,KAAoB;AAClCC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EADkC,CAGlC;;AACA,QAAMC,MAAM,GAAG,GAAf;AACA,QAAMC,KAAK,GAAG,GAAd;AAEA,QAAMC,GAAG,GAAGV,EAAE,CACXW,MADS,CACF,SADE,EAETC,MAFS,CAEF,KAFE,EAGTC,IAHS,CAGJ,qBAHI,EAGmB,eAHnB,EAITA,IAJS,CAIJ,SAJI,EAIO,CAAC,CAAD,EAAI,CAAJ,EAAOJ,KAAP,EAAcD,MAAd,CAJP,CAAZ,CAPkC,CAalC;;AACA,QAAMM,UAAU,GAAGd,EAAE,CAACe,WAAH,EAAnB;AACA,QAAMC,aAAa,GAAGhB,EAAE,CAACiB,OAAH,GAAaH,UAAb,CAAwBA,UAAxB,CAAtB,CAfkC,CAiBlC;;AACA,QAAMI,CAAC,GAAGR,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,OAArB,EAA8B,WAA9B,CAAV;AACAK,EAAAA,CAAC,CAACN,MAAF,CAAS,MAAT,EACGC,IADH,CACQ,OADR,EACiB,QADjB,EAEGA,IAFH,CAEQ,GAFR,EAEaG,aAAa,CAAC;AAAEG,IAAAA,IAAI,EAAE;AAAR,GAAD,CAF1B,EAnBkC,CAuBlC;AACA;AACA;AACA;AACA;AACA;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,CACVrB,EAAE,CAACsB,GAAH,CAAO,mDAAP,CADU,EAEVtB,EAAE,CAACuB,IAAH,CAAQ,oDAAR,CAFU,CAAZ,EAGGC,IAHH,CAGQ,CAAC,CAACC,OAAD,EAAUC,YAAV,CAAD,KAA6B;AACnC;AACA,UAAMC,WAAW,GAAG,EAApB;AACAF,IAAAA,OAAO,CAACG,OAAR,CAAiBC,CAAD,IAAO;AACrBF,MAAAA,WAAW,CAACE,CAAC,CAACC,MAAH,CAAX,GAAwBD,CAAC,CAACE,IAA1B;AACD,KAFD,EAHmC,CAOnC;;AACA,UAAMC,SAAS,GAAGC,OAAO,CAACP,YAAD,EAAeA,YAAY,CAACQ,OAAb,CAAqBF,SAApC,CAAzB;AACAd,IAAAA,CAAC,CAACiB,SAAF,CAAY,MAAZ,EACG9B,IADH,CACQ2B,SAAS,CAACI,QADlB,EAEGC,KAFH,GAGGzB,MAHH,CAGU,MAHV,EAIGC,IAJH,CAIQ,OAJR,EAIiB,SAJjB,EAKGA,IALH,CAKQ,GALR,EAKaG,aALb,EAMGJ,MANH,CAMU,OANV,EAOG0B,IAPH,CAOST,CAAD,IAAOF,WAAW,CAACE,CAAC,CAACU,EAAH,CAP1B;AAQD,GApBD;AAqBD,CAlDD,C,CAoDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAepC,OAAf","sourcesContent":["import * as d3 from \"d3\";\nimport * as topojson from \"topojson-client\";\nimport MapData from \"../Census_County_TIGER00_IN.json\";\n\nconst DrawMap = (caseType, data) => {\n  console.log(\"drawing map\");\n\n  // setting up svg element on Home component; making size responsive\n  const height = 500;\n  const width = 960;\n\n  const svg = d3\n    .select(\".mapviz\")\n    .append(\"svg\")\n    .attr(\"preserveAspectRatio\", \"xMinYMid meet\")\n    .attr(\"viewBox\", [0, 0, width, height]);\n\n  // specifying map projection\n  const projection = d3.geoMercator();\n  const pathGenerator = d3.geoPath().projection(projection);\n\n  // creating a group to arrange map elements\n  const g = svg.append(\"g\").attr(\"class\", \"map-group\");\n  g.append(\"path\")\n    .attr(\"class\", \"sphere\")\n    .attr(\"d\", pathGenerator({ type: \"Sphere\" }));\n\n  // enabling zooming/panning on entire svg\n  //   svg.call(\n  //     d3.zoom().on(\"zoom\", () => {\n  //       g.attr(\"transform\", d3.event.transform);\n  //     })\n  //   );\n  Promise.all([\n    d3.tsv(\"https://unpkg.com/world-atlas@1.1.4/world/50m.tsv\"),\n    d3.json(\"https://unpkg.com/world-atlas@1.1.4/world/50m.json\"),\n  ]).then(([tsvData, topoJSONdata]) => {\n    // parses tsvData to extract country names for base map titles\n    const countryName = {};\n    tsvData.forEach((d) => {\n      countryName[d.iso_n3] = d.name;\n    });\n\n    // draws a path for each country with countryName as title (shown on hover)\n    const countries = feature(topoJSONdata, topoJSONdata.objects.countries);\n    g.selectAll(\"path\")\n      .data(countries.features)\n      .enter()\n      .append(\"path\")\n      .attr(\"class\", \"country\")\n      .attr(\"d\", pathGenerator)\n      .append(\"title\")\n      .text((d) => countryName[d.id]);\n  });\n};\n\n// draws a path for each country with countryName as title (shown on hover)\n//   const countries = topojson.feature(\n//     MapData,\n//     MapData.objects.Census_County_TIGER00_IN1\n//   );\n//   g.selectAll(\"path\")\n//     .data(countries.features)\n//     .enter()\n//     .append(\"path\")\n//     .attr(\"class\", \"country\")\n//     .attr(\"d\", pathGenerator)\n//     .append(\"title\");\n// };\n\nexport default DrawMap;\n"]},"metadata":{},"sourceType":"module"}