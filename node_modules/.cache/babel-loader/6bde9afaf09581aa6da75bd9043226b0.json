{"ast":null,"code":"import * as d3 from \"d3\";\nimport { feature } from \"topojson\";\nimport MapData from \"../Census_County_TIGER00_IN.json\";\n\nconst DrawMap = (caseType, data) => {\n  console.log(\"drawing map\"); // setting up svg element on Home component; making size responsive\n\n  const height = 500;\n  const width = 960;\n  const svg = d3.select(\".mapviz\").append(\"svg\").attr(\"preserveAspectRatio\", \"xMinYMid meet\").attr(\"viewBox\", [0, 0, width, height]); // specifying map projection\n\n  const projection = d3.geoNaturalEarth1();\n  const pathGenerator = d3.geoPath().projection(projection); // creating a group to arrange map elements\n\n  const g = svg.append(\"g\").attr(\"class\", \"map-group\");\n  g.append(\"path\").attr(\"class\", \"sphere\").attr(\"d\", pathGenerator({\n    type: \"Sphere\"\n  })); // enabling zooming/panning on entire svg\n\n  svg.call(d3.zoom().on(\"zoom\", () => {\n    g.attr(\"transform\", d3.event.transform);\n  })); // fetching and loading geographic data\n  // tsvData supplies country names\n  // topoJSONdata supplies geographic coordinates for each country\n  //   Promise.all([\n  //     tsv(\"https://unpkg.com/world-atlas@1.1.4/world/50m.tsv\"),\n  //     json(\"https://unpkg.com/world-atlas@1.1.4/world/50m.json\"),\n  //   ]).then(([tsvData, topoJSONdata]) => {\n  //     // parses tsvData to extract country names for base map titles\n  //     const countryName = {};\n  //     tsvData.forEach((d) => {\n  //       countryName[d.iso_n3] = d.name;\n  //     });\n  // draws a path for each country with countryName as title (shown on hover)\n\n  const countries = feature(MapData, MapData.objects.Census_County_TIGER00_IN1);\n  g.selectAll(\"path\").data(countries.features).enter().append(\"path\").attr(\"class\", \"country\").attr(\"d\", pathGenerator).append(\"title\"); //   .text((d) => countryName[d.id]);\n  //   });\n};\n\nexport default DrawMap;","map":{"version":3,"sources":["/Users/azakeres/ArashWebsite/personalwebsite/src/d3/DrawMap.js"],"names":["d3","feature","MapData","DrawMap","caseType","data","console","log","height","width","svg","select","append","attr","projection","geoNaturalEarth1","pathGenerator","geoPath","g","type","call","zoom","on","event","transform","countries","objects","Census_County_TIGER00_IN1","selectAll","features","enter"],"mappings":"AAAA,OAAO,KAAKA,EAAZ,MAAoB,IAApB;AACA,SAASC,OAAT,QAAwB,UAAxB;AACA,OAAOC,OAAP,MAAoB,kCAApB;;AAEA,MAAMC,OAAO,GAAG,CAACC,QAAD,EAAWC,IAAX,KAAoB;AAClCC,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EADkC,CAGlC;;AACA,QAAMC,MAAM,GAAG,GAAf;AACA,QAAMC,KAAK,GAAG,GAAd;AAEA,QAAMC,GAAG,GAAGV,EAAE,CACXW,MADS,CACF,SADE,EAETC,MAFS,CAEF,KAFE,EAGTC,IAHS,CAGJ,qBAHI,EAGmB,eAHnB,EAITA,IAJS,CAIJ,SAJI,EAIO,CAAC,CAAD,EAAI,CAAJ,EAAOJ,KAAP,EAAcD,MAAd,CAJP,CAAZ,CAPkC,CAalC;;AACA,QAAMM,UAAU,GAAGd,EAAE,CAACe,gBAAH,EAAnB;AACA,QAAMC,aAAa,GAAGhB,EAAE,CAACiB,OAAH,GAAaH,UAAb,CAAwBA,UAAxB,CAAtB,CAfkC,CAiBlC;;AACA,QAAMI,CAAC,GAAGR,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,OAArB,EAA8B,WAA9B,CAAV;AACAK,EAAAA,CAAC,CAACN,MAAF,CAAS,MAAT,EACGC,IADH,CACQ,OADR,EACiB,QADjB,EAEGA,IAFH,CAEQ,GAFR,EAEaG,aAAa,CAAC;AAAEG,IAAAA,IAAI,EAAE;AAAR,GAAD,CAF1B,EAnBkC,CAuBlC;;AACAT,EAAAA,GAAG,CAACU,IAAJ,CACEpB,EAAE,CAACqB,IAAH,GAAUC,EAAV,CAAa,MAAb,EAAqB,MAAM;AACzBJ,IAAAA,CAAC,CAACL,IAAF,CAAO,WAAP,EAAoBb,EAAE,CAACuB,KAAH,CAASC,SAA7B;AACD,GAFD,CADF,EAxBkC,CA8BlC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,QAAMC,SAAS,GAAGxB,OAAO,CAACC,OAAD,EAAUA,OAAO,CAACwB,OAAR,CAAgBC,yBAA1B,CAAzB;AACAT,EAAAA,CAAC,CAACU,SAAF,CAAY,MAAZ,EACGvB,IADH,CACQoB,SAAS,CAACI,QADlB,EAEGC,KAFH,GAGGlB,MAHH,CAGU,MAHV,EAIGC,IAJH,CAIQ,OAJR,EAIiB,SAJjB,EAKGA,IALH,CAKQ,GALR,EAKaG,aALb,EAMGJ,MANH,CAMU,OANV,EA7CkC,CAoDlC;AACA;AACD,CAtDD;;AAwDA,eAAeT,OAAf","sourcesContent":["import * as d3 from \"d3\";\nimport { feature } from \"topojson\";\nimport MapData from \"../Census_County_TIGER00_IN.json\";\n\nconst DrawMap = (caseType, data) => {\n  console.log(\"drawing map\");\n\n  // setting up svg element on Home component; making size responsive\n  const height = 500;\n  const width = 960;\n\n  const svg = d3\n    .select(\".mapviz\")\n    .append(\"svg\")\n    .attr(\"preserveAspectRatio\", \"xMinYMid meet\")\n    .attr(\"viewBox\", [0, 0, width, height]);\n\n  // specifying map projection\n  const projection = d3.geoNaturalEarth1();\n  const pathGenerator = d3.geoPath().projection(projection);\n\n  // creating a group to arrange map elements\n  const g = svg.append(\"g\").attr(\"class\", \"map-group\");\n  g.append(\"path\")\n    .attr(\"class\", \"sphere\")\n    .attr(\"d\", pathGenerator({ type: \"Sphere\" }));\n\n  // enabling zooming/panning on entire svg\n  svg.call(\n    d3.zoom().on(\"zoom\", () => {\n      g.attr(\"transform\", d3.event.transform);\n    })\n  );\n\n  // fetching and loading geographic data\n  // tsvData supplies country names\n  // topoJSONdata supplies geographic coordinates for each country\n  //   Promise.all([\n  //     tsv(\"https://unpkg.com/world-atlas@1.1.4/world/50m.tsv\"),\n  //     json(\"https://unpkg.com/world-atlas@1.1.4/world/50m.json\"),\n  //   ]).then(([tsvData, topoJSONdata]) => {\n  //     // parses tsvData to extract country names for base map titles\n  //     const countryName = {};\n  //     tsvData.forEach((d) => {\n  //       countryName[d.iso_n3] = d.name;\n  //     });\n\n  // draws a path for each country with countryName as title (shown on hover)\n  const countries = feature(MapData, MapData.objects.Census_County_TIGER00_IN1);\n  g.selectAll(\"path\")\n    .data(countries.features)\n    .enter()\n    .append(\"path\")\n    .attr(\"class\", \"country\")\n    .attr(\"d\", pathGenerator)\n    .append(\"title\");\n  //   .text((d) => countryName[d.id]);\n  //   });\n};\n\nexport default DrawMap;\n"]},"metadata":{},"sourceType":"module"}