{"ast":null,"code":"var _jsxFileName = \"/Users/azakeres/ArashWebsite/personalwebsite/src/components/scatter-plot.jsx\";\nimport React from \"react\";\nimport * as d3 from \"d3\";\nimport DataCircles from \"./data-circles\";\nimport XYAxis from \"./x-y-axis\";\nimport geoJson from \"../Census_County_TIGER00_IN.geojson\"; // Returns the largest X coordinate from the data set\n\nconst xMax = data => d3.max(data, d => d[0]); // Returns the higest Y coordinate from the data set\n\n\nconst yMax = data => d3.max(data, d => d[1]); // Returns a function that \"scales\" X coordinates from the data to fit the chart\n\n\nconst xScale = props => {\n  return d3.scaleLinear().domain([0, xMax(props.data)]).range([props.padding, props.width - props.padding * 2]);\n}; // Returns a function that \"scales\" Y coordinates from the data to fit the chart\n\n\nconst yScale = props => {\n  return d3.scaleLinear().domain([0, yMax(props.data)]).range([props.height - props.padding, props.padding]);\n};\n\nexport default (props => {\n  var projection = d3.geoEquirectangular();\n  var geoGenerator = d3.geoPath().projection(projection);\n  var u = d3.select(\"#content g.map\").selectAll(\"path\").data(geojson.features);\n  geoGenerator(geoJson);\n  u.enter().append(\"path\").attr(\"d\", geoGenerator);\n  const scales = {\n    xScale: xScale(props),\n    yScale: yScale(props)\n  };\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    width: props.width,\n    height: props.height,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DataCircles, Object.assign({}, props, scales, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(XYAxis, Object.assign({}, props, scales, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  })));\n});","map":{"version":3,"sources":["/Users/azakeres/ArashWebsite/personalwebsite/src/components/scatter-plot.jsx"],"names":["React","d3","DataCircles","XYAxis","geoJson","xMax","data","max","d","yMax","xScale","props","scaleLinear","domain","range","padding","width","yScale","height","projection","geoEquirectangular","geoGenerator","geoPath","u","select","selectAll","geojson","features","enter","append","attr","scales"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,OAAOC,MAAP,MAAmB,YAAnB;AACA,OAAOC,OAAP,MAAoB,qCAApB,C,CAEA;;AACA,MAAMC,IAAI,GAAIC,IAAD,IAAUL,EAAE,CAACM,GAAH,CAAOD,IAAP,EAAcE,CAAD,IAAOA,CAAC,CAAC,CAAD,CAArB,CAAvB,C,CAEA;;;AACA,MAAMC,IAAI,GAAIH,IAAD,IAAUL,EAAE,CAACM,GAAH,CAAOD,IAAP,EAAcE,CAAD,IAAOA,CAAC,CAAC,CAAD,CAArB,CAAvB,C,CAEA;;;AACA,MAAME,MAAM,GAAIC,KAAD,IAAW;AACxB,SAAOV,EAAE,CACNW,WADI,GAEJC,MAFI,CAEG,CAAC,CAAD,EAAIR,IAAI,CAACM,KAAK,CAACL,IAAP,CAAR,CAFH,EAGJQ,KAHI,CAGE,CAACH,KAAK,CAACI,OAAP,EAAgBJ,KAAK,CAACK,KAAN,GAAcL,KAAK,CAACI,OAAN,GAAgB,CAA9C,CAHF,CAAP;AAID,CALD,C,CAOA;;;AACA,MAAME,MAAM,GAAIN,KAAD,IAAW;AACxB,SAAOV,EAAE,CACNW,WADI,GAEJC,MAFI,CAEG,CAAC,CAAD,EAAIJ,IAAI,CAACE,KAAK,CAACL,IAAP,CAAR,CAFH,EAGJQ,KAHI,CAGE,CAACH,KAAK,CAACO,MAAN,GAAeP,KAAK,CAACI,OAAtB,EAA+BJ,KAAK,CAACI,OAArC,CAHF,CAAP;AAID,CALD;;AAOA,gBAAgBJ,KAAD,IAAW;AACxB,MAAIQ,UAAU,GAAGlB,EAAE,CAACmB,kBAAH,EAAjB;AACA,MAAIC,YAAY,GAAGpB,EAAE,CAACqB,OAAH,GAAaH,UAAb,CAAwBA,UAAxB,CAAnB;AACA,MAAII,CAAC,GAAGtB,EAAE,CAACuB,MAAH,CAAU,gBAAV,EAA4BC,SAA5B,CAAsC,MAAtC,EAA8CnB,IAA9C,CAAmDoB,OAAO,CAACC,QAA3D,CAAR;AACAN,EAAAA,YAAY,CAACjB,OAAD,CAAZ;AACAmB,EAAAA,CAAC,CAACK,KAAF,GAAUC,MAAV,CAAiB,MAAjB,EAAyBC,IAAzB,CAA8B,GAA9B,EAAmCT,YAAnC;AAEA,QAAMU,MAAM,GAAG;AAAErB,IAAAA,MAAM,EAAEA,MAAM,CAACC,KAAD,CAAhB;AAAyBM,IAAAA,MAAM,EAAEA,MAAM,CAACN,KAAD;AAAvC,GAAf;AACA,sBACE;AAAK,IAAA,KAAK,EAAEA,KAAK,CAACK,KAAlB;AAAyB,IAAA,MAAM,EAAEL,KAAK,CAACO,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD,oBAAiBP,KAAjB,EAA4BoB,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,eAEE,oBAAC,MAAD,oBAAYpB,KAAZ,EAAuBoB,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,CADF;AAMD,CAdD","sourcesContent":["import React from \"react\";\nimport * as d3 from \"d3\";\nimport DataCircles from \"./data-circles\";\nimport XYAxis from \"./x-y-axis\";\nimport geoJson from \"../Census_County_TIGER00_IN.geojson\";\n\n// Returns the largest X coordinate from the data set\nconst xMax = (data) => d3.max(data, (d) => d[0]);\n\n// Returns the higest Y coordinate from the data set\nconst yMax = (data) => d3.max(data, (d) => d[1]);\n\n// Returns a function that \"scales\" X coordinates from the data to fit the chart\nconst xScale = (props) => {\n  return d3\n    .scaleLinear()\n    .domain([0, xMax(props.data)])\n    .range([props.padding, props.width - props.padding * 2]);\n};\n\n// Returns a function that \"scales\" Y coordinates from the data to fit the chart\nconst yScale = (props) => {\n  return d3\n    .scaleLinear()\n    .domain([0, yMax(props.data)])\n    .range([props.height - props.padding, props.padding]);\n};\n\nexport default (props) => {\n  var projection = d3.geoEquirectangular();\n  var geoGenerator = d3.geoPath().projection(projection);\n  var u = d3.select(\"#content g.map\").selectAll(\"path\").data(geojson.features);\n  geoGenerator(geoJson);\n  u.enter().append(\"path\").attr(\"d\", geoGenerator);\n\n  const scales = { xScale: xScale(props), yScale: yScale(props) };\n  return (\n    <svg width={props.width} height={props.height}>\n      <DataCircles {...props} {...scales} />\n      <XYAxis {...props} {...scales} />\n    </svg>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}